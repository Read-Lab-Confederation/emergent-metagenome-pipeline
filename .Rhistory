from Bio import SeqIO
def check fastqIds(r1, r2):
id_list_r1=[]
id_list_r2=[]
# read Ids from r1
with open(r1) as handle:
for record in SeqIO.parse(handle, "fastq"):
id_list_r1.append(record.id)
# read Ids from r2
with open(r2) as handle:
for record in SeqIO.parse(handle, "fastq"):
id_list_r2.append(record.id)
# cehck if Ids are the same
if id_list_r1 == id_list_r2:
print("passed from the first check")
else:
r1_edit = [sub[: -2] for sub in id_list_r1]
r1_edit = r1_edit.sort()
r2_edit = [sub[: -2] for sub in id_list_r2]
r2_edit = r2_edit.sort()
if r1_edit == r2_edit:
print("Sorted read IDs with last 2 chars removed pass")
else:
print('Reads IDs do not match')
check fastqIds(r1 = './data/downsampled_ERR2984773_R1.fastq', r2 = 'downsampled_ERR2984773_R2.fastq')
from Bio import SeqIO
def check fastqIds(r1, r2):
id_list_r1=[]
id_list_r2=[]
# read Ids from r1
with open(r1) as handle:
for record in SeqIO.parse(handle, "fastq"):
id_list_r1.append(record.id)
# read Ids from r2
with open(r2) as handle:
for record in SeqIO.parse(handle, "fastq"):
id_list_r2.append(record.id)
# cehck if Ids are the same
if id_list_r1 == id_list_r2:
print("passed from the first check")
else:
r1_edit = [sub[: -2] for sub in id_list_r1]
r1_edit = r1_edit.sort()
r2_edit = [sub[: -2] for sub in id_list_r2]
r2_edit = r2_edit.sort()
if r1_edit == r2_edit:
print("Sorted read IDs with last 2 chars removed pass")
else:
print('Reads IDs do not match')
def check fastqIds(r1, r2):
id_list_r1=[]
id_list_r2=[]
def check_fastqIds(r1, r2):
id_list_r1=[]
id_list_r2=[]
# read Ids from r1
with open(r1) as handle:
for record in SeqIO.parse(handle, "fastq"):
id_list_r1.append(record.id)
# read Ids from r2
with open(r2) as handle:
for record in SeqIO.parse(handle, "fastq"):
id_list_r2.append(record.id)
# cehck if Ids are the same
if id_list_r1 == id_list_r2:
print("passed from the first check")
else:
r1_edit = [sub[: -2] for sub in id_list_r1]
r1_edit = r1_edit.sort()
r2_edit = [sub[: -2] for sub in id_list_r2]
r2_edit = r2_edit.sort()
if r1_edit == r2_edit:
print("Sorted read IDs with last 2 chars removed pass")
else:
print('Reads IDs do not match')
check_fastqIds(r1 = './data/downsampled_ERR2984773_R1.fastq', r2 = 'downsampled_ERR2984773_R2.fastq')
check_fastqIds(r1 = './data/downsampled_ERR2984773_R1.fastq', r2 = './data/downsampled_ERR2984773_R2.fastq')
check_fastqIds(r1 = './data/downsampled_ERR2984773_R1.fastq', r2 = './data/downsampled_ERR2984773_R1.fastq')
check_fastqIds(r1 = './data/downsampled_ERR2984773_R1.fastq', r2 = './data/downsampled_ERR2984773_filtered_R2.fastq')
check_fastqIds(r1 = './data/downsampled_ERR2984773_R1.fastq', r2 = './work/downsampled_ERR2984773_filtered_R2.fastq')
check_fastqIds(r1 = './data/downsampled_ERR2984773_R1.fastq', r2 = './script_drafts/downsampled_ERR2984773_R2_fail.fastq')
check_fastqIds(r1 = './data/downsampled_ERR2984773_R1.fastq', r2 = './script_drafts/downsampled_ERR2984773_R2_fail.fastq')
id_list_r1=[]
id_list_r2=[]
# read Ids from r1
with open(r1) as handle:
for record in SeqIO.parse(handle, "fastq"):
id_list_r1.append(record.id)
r1 = './data/downsampled_ERR2984773_R1.fastq'
r2 = './data/downsampled_ERR2984773_R2.fastq'
id_list_r1=[]
id_list_r2=[]
# read Ids from r1
with open(r1) as handle:
for record in SeqIO.parse(handle, "fastq"):
id_list_r1.append(record.id)
# read Ids from r2
with open(r2) as handle:
for record in SeqIO.parse(handle, "fastq"):
id_list_r2.append(record.id)
with open(r1) as handle:
for record in SeqIO.parse(handle, "fastq"):
id_list_r1.append(record.id)
with open(r1) as handle:
for record in SeqIO.parse(handle, "fastq"):
with open(r1) as handle:
for record in SeqIO.parse(handle, "fastq"):
id_list_r1.append(record.id)
with open(r2) as handle:
for record in SeqIO.parse(handle, "fastq"):
id_list_r2.append(record.id)
r1_edit = [sub[: -2] for sub in id_list_r1]
r1_edit = r1_edit.sort()
r2_edit = [sub[: -2] for sub in id_list_r2]
r2_edit = r2_edit.sort()
r1_edit == r2_edit
with open(r1) as handle:
for record in SeqIO.parse(handle, "fastq"):
id_list_r1.append(record.id)
with open(r2) as handle:
for record in SeqIO.parse(handle, "fastq"):
id_list_r2.append(record.id)
r1_edit = [sub[: -2] for sub in id_list_r1]
r1_edit = r1_edit.sort()
r2_edit = [sub[: -2] for sub in id_list_r2]
r2_edit = r2_edit.sort()
r1_edit == r2_edit
print(r1_edit)
id_list_r1=[]
id_list_r2=[]
with open(r1) as handle:
for record in SeqIO.parse(handle, "fastq"):
id_list_r1.append(record.id)
with open(r2) as handle:
for record in SeqIO.parse(handle, "fastq"):
id_list_r2.append(record.id)
r1_edit = [sub[: -2] for sub in id_list_r1]
r1_edit = r1_edit.sort()
r2_edit = [sub[: -2] for sub in id_list_r2]
r2_edit = r2_edit.sort()
r1_edit == r2_edit
r1_edit = [sub[: -2] for sub in id_list_r1]
r2_edit = [sub[: -2] for sub in id_list_r2]
r1_edit_s = r1_edit.sort()
class(r1_edit)
type(r1_edit)
print(r2_edit)
len(r2_edit)
r2 = './script_drafts/downsampled_ERR2984773_R2_fail.fastq'
id_list_r1=[]
id_list_r2=[]
with open(r1) as handle:
for record in SeqIO.parse(handle, "fastq"):
id_list_r1.append(record.id)
with open(r2) as handle:
for record in SeqIO.parse(handle, "fastq"):
id_list_r2.append(record.id)
r1_edit = [sub[: -2] for sub in id_list_r1]
r1_edit_s = r1_edit.sort()
r2_edit = [sub[: -2] for sub in id_list_r2]
r2_edit = r2_edit.sort()
r1_edit == r2_edit
r2_edit
print(r2_edit)
r2_edit = [sub[: -2] for sub in id_list_r2]
print(r2_edit)
r2_edit = [sub[: -2] for sub in id_list_r2].sort()
print(r2_edit)
r2_edit = [sub[: -2] for sub in id_list_r2]
print(r2_edit)
r2_edit.sort()
print(r2_edit)
r2_edit = sorted(r2_edit)
r2_edit = [sub[: -2] for sub in id_list_r2]
print(r2_edit)
r2_edit = sorted(r2_edit)
print(r2_edit)
id_list_r1=[]
id_list_r2=[]
with open(r1) as handle:
for record in SeqIO.parse(handle, "fastq"):
id_list_r1.append(record.id)
with open(r2) as handle:
for record in SeqIO.parse(handle, "fastq"):
id_list_r2.append(record.id)
r1_edit = [sub[: -2] for sub in id_list_r1]
r1_edit = sorted(r1_edit)
r2_edit = [sub[: -2] for sub in id_list_r2]
r2_edit = sorted(r2_edit)
r1_edit == r2_edit
id_list_r1=[]
id_list_r2=[]
with open(r1) as handle:
for record in SeqIO.parse(handle, "fastq"):
id_list_r1.append(record.id)
with open(r2) as handle:
for record in SeqIO.parse(handle, "fastq"):
id_list_r2.append(record.id)
r1_edit = [sub[: -2] for sub in id_list_r1]
r1_edit = sorted(r1_edit)
r2_edit = [sub[: -2] for sub in id_list_r2]
r2_edit = sorted(r2_edit)
r1_edit == r2_edit
print(len(r2_edit))
from Bio import SeqIO
def check_fastqIds(r1, r2):
id_list_r1=[]
id_list_r2=[]
# read Ids from r1
with open(r1) as handle:
for record in SeqIO.parse(handle, "fastq"):
id_list_r1.append(record.id)
# read Ids from r2
with open(r2) as handle:
for record in SeqIO.parse(handle, "fastq"):
id_list_r2.append(record.id)
# cehck if Ids are the same
if id_list_r1 == id_list_r2:
print("passed from the first check")
else:
r1_edit = sorted([sub[: -2] for sub in id_list_r1])
#r1_edit = sorted(r1_edit)
r2_edit = sorted([sub[: -2] for sub in id_list_r2])
#r2_edit = sorted(r2_edit.sort())
if r1_edit == r2_edit:
print("Sorted read IDs with last 2 chars removed pass")
else:
print('Reads IDs do not match')
# pass
check_fastqIds(r1 = './data/downsampled_ERR2984773_R1.fastq', r2 = './data/downsampled_ERR2984773_R2.fastq')
check_fastqIds(r1 = './data/downsampled_ERR2984773_R1.fastq', r2 = './script_drafts/downsampled_ERR2984773_R2_fail.fastq')
import pytest
@pytest.fixture
def example_fixture():
return 1
def test_with_fixture(example_fixture):
assert example_fixture == 1
import pytest
reticulate::repl_python()
